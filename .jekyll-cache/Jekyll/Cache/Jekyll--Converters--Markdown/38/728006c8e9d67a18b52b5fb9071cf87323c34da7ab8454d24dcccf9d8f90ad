I"ëA<h2 id="introduction"><strong>Introduction</strong></h2>

<p>In this post, Iâ€™ll be sharing the journey of building my custom ortholinear keyboard. From initial design to final assembly, I will walk you through each step of the process.</p>

<p>I wanted to do something different by incorporating <strong>analog switches</strong> for the <strong>WASD and arrow keys</strong>. This allows for more precise control, making the keyboard ideal for gaming and other applications requiring nuanced input. Additionally, Iâ€™ve included <strong>quarter-size switches</strong> that fit four buttons into a single key cap. These coloUr-coordinated buttons act as another version of the shift key, allowing for many more characters to be incorporated into a single keyboard. This innovative approach significantly expands the functionality and versatility of the keyboard, whilst giving a custom flare that separates it from off the shelf, hence the name UNORTHODOX.</p>

<h2 id="why-ortholinear"><strong>Why Ortholinear?</strong></h2>

<p>The decision to build an ortholinear keyboard stems from both aesthetic and functional considerations. Ortholinear keyboards feature a grid-like layout where keys are aligned in straight columns and rows, creating a clean and simple look. This simplicity in design not only makes the keyboard visually appealing but also streamlines the process of arranging the circuit board.</p>

<h3 id="simplicity-and-efficiency"><strong>Simplicity and Efficiency</strong></h3>

<p>The uniform arrangement of keys in an ortholinear keyboard simplifies the design and manufacturing process. With keys neatly aligned in a grid, designing the PCB (printed circuit board) becomes more straightforward, as the traces and connections can follow a logical and organized pattern. This can reduce the complexity of the circuit design and potentially lower production costs. Moreover, the consistent alignment of keys can improve typing accuracy and speed for some users, as fingers move in a more natural, linear fashion.</p>

<h3 id="historical-context"><strong>Historical Context</strong></h3>

<p>To understand the appeal of the ortholinear layout, itâ€™s useful to look back at the history of keyboard design. The staggered layout of traditional keyboards dates back to the era of mechanical typewriters. In early typewriters, the keys were arranged in a staggered pattern to prevent the levers from jamming together when typing quickly. This design was a practical solution to a mechanical problem.</p>

<h3 id="modern-relevance"><strong>Modern Relevance</strong></h3>

<p>However, with the advent of electronic keyboards, the staggered layout no longer serves a functional purpose. Modern keyboards do not have the same mechanical constraints, and the staggered arrangement persists largely out of convention rather than necessity. As a result, the ortholinear layout presents an opportunity to reimagine keyboard design without being bound by outdated mechanical requirements.</p>

<p>In summary, the ortholinear layout offers a sleek, efficient, and historically informed alternative to the traditional staggered keyboard design. By embracing this modern approach, we can create keyboards that are not only more visually appealing but also potentially more ergonomic and easier to manufacture.</p>

<h2 id="project-overview"><strong>Project Overview</strong></h2>

<p>In this project, I opted to use <strong>KICAD</strong> for designing the motherboard and <strong>OpenSCAD</strong> for creating custom keycaps. Both of these tools offer robust features and flexibility, making them ideal for my custom ortholinear keyboard build.</p>

<h3 id="kicad-for-motherboard-design">KICAD for Motherboard Design</h3>

<p>KICAD is a powerful, open-source electronic design automation (EDA) software suite that I chose for designing the keyboardâ€™s PCB (printed circuit board). Its comprehensive set of tools allows for intricate and precise design, making it perfect for handling the unique layout and requirements of an ortholinear keyboard.</p>

<p>Using KICAD, I was able to:</p>

<ul>
  <li><strong>Schematic Capture</strong>: Create detailed and organized schematic diagrams that represent the electrical connections between components.</li>
  <li><strong>PCB Layout</strong>: Design the physical layout of the PCB with precision, ensuring that all components are placed optimally and that the electrical traces are routed efficiently.</li>
  <li><strong>3D Visualization</strong>: Preview the design in 3D to get a better understanding of how the final product will look and to check for any potential issues with component placement or interference.</li>
  <li><strong>Gerber File Generation</strong>: Produce the necessary files for manufacturing the PCB, ensuring that everything is ready for fabrication.</li>
</ul>

<p>KICADâ€™s open-source nature and extensive community support also provided valuable resources and tutorials throughout the design process.</p>

<h3 id="openscad-for-custom-keycaps">OpenSCAD for Custom Keycaps</h3>

<p>For creating custom keycaps, I chose <strong>OpenSCAD</strong>, a script-based 3D CAD modeler. OpenSCAD is particularly well-suited for parametric design, allowing for precise control over the dimensions and features of the keycaps.</p>

<p>With OpenSCAD, I was able to:</p>

<ul>
  <li><strong>Custom Shapes</strong>: Design keycaps with specific shapes and profiles that fit the quarter-size switches, enabling the innovative 4-buttons-in-one-keycap feature.</li>
  <li><strong>Color Coordination</strong>: Easily incorporate different colors into the keycap design, aligning with the color-coordinated shift functionality.</li>
  <li><strong>Parametric Design</strong>: Adjust dimensions and features quickly by changing parameters in the script, streamlining the process of tweaking and perfecting the keycaps.</li>
  <li><strong>3D Printing</strong>: Generate STL files for 3D printing, allowing for rapid prototyping and iteration to ensure the keycaps fit perfectly and function as intended.</li>
</ul>

<p>By using OpenSCAD, I could achieve a high level of customization and precision, creating keycaps that not only meet the functional requirements of the keyboard but also enhance its aesthetic appeal.</p>

<p>Together, KICAD and OpenSCAD provided a robust and flexible foundation for designing and bringing my custom ortholinear keyboard to life. These tools enabled me to overcome the challenges of custom keyboard design and realize my vision for a unique and highly functional input device.</p>

<h2 id="design-and-development-process">Design and Development Process</h2>

<h3 id="schematic-design">Schematic Design</h3>

<p>The heart of any custom keyboard project lies in the design of its PCB (printed circuit board). Below is the schematic diagram of my custom ortholinear keyboard, designed using KICAD.</p>

<p><img src="/images/keyswitchmatrix.webp" alt="Schematic Diagram" /></p>

<p>The schematic can be broken down into several key sections:</p>

<h4 id="microcontroller-unit-mcu">Microcontroller Unit (MCU)</h4>

<p>At the core of the design is the <strong>ATmega32U4</strong> microcontroller (U1), which serves as the brain of the keyboard. This microcontroller is chosen for its compatibility with USB HID (Human Interface Device) and its ability to handle multiple input/output operations. Key connections include:</p>
<ul>
  <li><strong>Power Pins</strong>: VCC, AVCC, and GND are connected to ensure the MCU is properly powered.</li>
  <li><strong>Reset</strong>: A reset circuit is included to restart the MCU when needed.</li>
  <li><strong>Crystal Oscillator</strong>: The XTAL1 and XTAL2 pins are connected to a crystal oscillator (Y1) and capacitors (C2, C3) to provide the necessary clock signal for the MCUâ€™s operation.</li>
  <li><strong>USB Data Lines</strong>: The D+ and D- lines are connected through resistors (R3, R4) for proper USB communication.</li>
</ul>

<h4 id="usb-connection">USB Connection</h4>

<p>The USB interface (J1) is crucial for connecting the keyboard to a computer. This section includes:</p>
<ul>
  <li><strong>USB Type-C Receptacle</strong>: The schematic shows a USB Type-C connector (X1) wired for USB 2.0 functionality.</li>
  <li><strong>Power Lines</strong>: VBUS and GND provide power from the USB connection.</li>
  <li><strong>Data Lines</strong>: The D+ and D- lines are routed to the MCU for data transmission.</li>
</ul>

<h4 id="key-matrix">Key Matrix</h4>

<p>The key matrix configuration is a crucial part of the schematic:</p>
<ul>
  <li><strong>Rows and Columns</strong>: The MCUâ€™s GPIO (General-Purpose Input/Output) pins are connected to the rows (ROW0, ROW1, ROW2, ROW3) and columns (COL0, COL1, COL2, etc.) of the key matrix.</li>
  <li><strong>Pull-up Resistors</strong>: Internal or external pull-up resistors are used on the rows or columns to ensure reliable key press detection.</li>
</ul>

<p><img src="/images/keyboardmotherboard.webp" alt="Initial Design Sketch" /></p>

<h4 id="reset-and-other-components">Reset and Other Components</h4>

<p>Other essential components include:</p>
<ul>
  <li><strong>Reset Button (SW1)</strong>: Connected to the reset pin through a pull-down resistor (R1) and capacitor (C1) to debounce the reset signal.</li>
  <li><strong>Decoupling Capacitors (C4, C5, C6, C7)</strong>: These capacitors are placed close to the power pins of the MCU to stabilize the power supply and reduce noise.</li>
</ul>

<p>This schematic lays the foundation for the physical PCB layout, where these connections will be translated into copper traces and pads. Designing this schematic required careful planning to ensure all components interact correctly and the keyboard functions as intended.</p>

<h3 id="case-design">Case Design</h3>

<p>The case design of the ORTHODOX keyboard is a critical aspect that not only houses the components but also enhances the overall aesthetic and functionality of the device. For this project, I utilized <strong>OpenSCAD</strong> to parametrically design the key switches and <strong>FreeCAD</strong> to create the outer case that encloses the battery and PCB.</p>

<h3 id="parametric-design-with-openscad">Parametric Design with OpenSCAD</h3>

<p>OpenSCAD, a script-based 3D CAD modeler, was instrumental in designing the key switches. The parametric design capabilities of OpenSCAD allowed me to define parameters such as key dimensions, spacing, and profiles, which made it easy to iterate and refine the design.</p>

<ul>
  <li><strong>Precision and Customization</strong>: By defining parameters in the script, I could easily adjust the size and shape of the key switches. This was particularly useful for creating the quarter-size switches that integrate four buttons into a single keycap, enhancing the keyboardâ€™s functionality.</li>
  <li><strong>Efficient Iteration</strong>: The script-based nature of OpenSCAD allowed for quick modifications. I could change a parameter value and immediately see the impact on the design, streamlining the process of achieving the desired fit and feel for the key switches.</li>
  <li><strong>3D Printing Ready</strong>: Once the design was finalized, OpenSCAD generated STL files for 3D printing. This enabled rapid prototyping and ensured that the keycaps fit perfectly on the switches and aligned correctly with the PCB.</li>
</ul>

<h3 id="creating-the-outer-case-with-freecad">Creating the Outer Case with FreeCAD</h3>

<p>For the outer case, I chose <strong>FreeCAD</strong> due to its robust features and support for complex geometries. FreeCAD provided the necessary tools to design a sleek and functional enclosure that securely houses the keyboardâ€™s PCB and battery.</p>

<ul>
  <li><strong>Detailed Design</strong>: FreeCAD allowed for precise modeling of the outer case. I could design intricate features such as mounting points, cable channels, and ventilation slots to ensure proper assembly and functionality.</li>
  <li><strong>Enclosing the Components</strong>: The design included specific compartments for the PCB and battery. By accurately modeling these components in FreeCAD, I could ensure that they fit snugly within the case, preventing any movement that could lead to damage or connectivity issues.</li>
  <li><strong>Parametric Features</strong>: Similar to OpenSCAD, FreeCAD supports parametric design, enabling adjustments to the case dimensions and features without starting from scratch. This flexibility was crucial in refining the case design to accommodate any changes in the PCB layout or battery size.</li>
  <li><strong>3D Printing and Machining</strong>: The final case design was exported as STL files for 3D printing and CAD files for CNC machining. This dual approach allowed me to choose the best manufacturing method based on material preferences and production needs.</li>
</ul>

<h3 id="material-selection-and-manufacturing">Material Selection and Manufacturing</h3>

<p>The case was 3D printed using a durable PLA filament, chosen for its strength and ease of printing. For the final version, I considered using aluminum or acrylic to enhance durability and aesthetics.</p>

<ul>
  <li><strong>Prototyping</strong>: Initial prototypes were 3D printed to test the fit and functionality of the case design. These prototypes helped identify any necessary adjustments to the design, ensuring that the final product would meet the desired specifications.</li>
  <li><strong>Final Production</strong>: For the final version, I planned to use CNC machining for an aluminum case or laser cutting for an acrylic case. These materials not only provide a premium look and feel but also offer increased durability compared to plastic.</li>
</ul>

<h3 id="assembly">Assembly</h3>

<p>The case design also included features to simplify assembly:</p>

<ul>
  <li><strong>Snap-fit Mechanisms</strong>: Designed to allow easy assembly without screws, reducing the number of parts and simplifying the build process.</li>
  <li><strong>Cable Management</strong>: Internal channels and clips to manage and secure cables, preventing them from interfering with the components.</li>
  <li><strong>Access Points</strong>: Designed for easy access to the USB port, power switch, and other critical components, making the keyboard user-friendly and easy to maintain.</li>
</ul>

<p>In summary, the combination of OpenSCAD and FreeCAD provided a powerful toolkit for designing a custom, functional, and aesthetically pleasing case for the ORTHODOX keyboard. The parametric design capabilities of both tools ensured precision and flexibility, allowing for efficient prototyping and final production.</p>

<h3 id="firmware-development">Firmware Development</h3>

<p>Explain how you developed or customized the firmware for your keyboard. Mention any specific features or functions you implemented.</p>

<h2 id="components-used">Components Used</h2>

<p>List all the components used in your keyboard build, including:</p>

<ul>
  <li><strong>Switches</strong>: Type and brand</li>
  <li><strong>Keycaps</strong>: Material, profile, and design</li>
  <li><strong>Microcontroller</strong>: Model and specifications</li>
  <li><strong>Other Components</strong>: Diodes, resistors, LEDs, etc.</li>
</ul>

<h2 id="assembly-process">Assembly Process</h2>

<h3 id="soldering">Soldering</h3>

<p>Provide a step-by-step guide on soldering the components onto the PCB. Include tips for beginners.</p>

<p><img src="path_to_your_image" alt="Soldering Process" /></p>

<h3 id="assembling-the-case">Assembling the Case</h3>

<p>Explain how you assembled the case, including any challenges you faced and how you overcame them.</p>

<p><img src="path_to_your_image" alt="Case Assembly" /></p>

<h3 id="final-assembly">Final Assembly</h3>

<p>Show the final steps of putting everything together and performing the first test.</p>

<p><img src="path_to_your_image" alt="Final Assembly" /></p>

<h2 id="challenges-faced">Challenges Faced</h2>

<p>Discuss any major challenges you encountered during the project and how you solved them.</p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Share your overall experience and any future plans for your keyboard or other projects. Include any lessons learned and advice for others interested in building their own custom keyboards.</p>

<p><img src="path_to_your_image" alt="Finished Keyboard" /></p>

<h2 id="gallery">Gallery</h2>

<p>Include a gallery of images showcasing your finished keyboard from different angles.</p>

<p><img src="path_to_your_image" alt="Keyboard Image 1" />
<img src="path_to_your_image" alt="Keyboard Image 2" />
<img src="path_to_your_image" alt="Keyboard Image 3" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Thank your readers for following along with your project. Encourage them to leave comments or ask questions if they have any.</p>

<hr />

:ET